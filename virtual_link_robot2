#!/usr/bin/env python
#coding:utf-8
#################################################################################
# Copyright 2018 ROBOTIS CO., LTD.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#################################################################################

# Authors: Gilbert #

import rospy
from geometry_msgs.msg import Twist, Point, Quaternion
import tf
from math import radians, copysign, sqrt, pow, pi, atan2
from tf.transformations import euler_from_quaternion
import numpy as np

class GotoPoint():
    def __init__(self):
        rospy.init_node('virtual_link_robot2', anonymous=False)
        rospy.on_shutdown(self.shutdown)
        self.cmd_vel = rospy.Publisher('robot2/cmd_vel', Twist, queue_size=5)
        
        
        self.r = rospy.Rate(10)
        self.tf_listener_robot2 = tf.TransformListener()
	self.tf_listener_robot1 = tf.TransformListener()
        self.odom_frame_robot2 = 'robot2/odom'        
        self.base_frame_robot2 = 'robot2/base_footprint'
        self.odom_frame_robot1 = 'robot1/odom'
        self.base_frame_robot1 = 'robot1/base_footprint'

        #默认已有
        self.tf_listener_robot2.waitForTransform(self.odom_frame_robot2, 'robot2/base_footprint', rospy.Time(), rospy.Duration(1.0))
        self.tf_listener_robot1.waitForTransform(self.odom_frame_robot1, 'robot1/base_footprint', rospy.Time(), rospy.Duration(1.0))
	
        #2车去往初始点        
	self.gotoPoint((1,0,pi*3/4))
	print('判断1车是否就位')
        (position_another, rotation_another) = self.get_odom_robot1() 
        distance_another = sqrt(pow((0 - position_another.x), 2) + pow((0 - position_another.y), 2))        
        #判断1车是否就位
        
        while distance_another > 0.05 or (not(rotation_another>pi/4-0.2 and rotation_another<pi/4+0.2)):
            (position_another, rotation_another) = self.get_odom_robot1() 
            distance_another = sqrt(pow((0 - position_another.x), 2) + pow((0 - position_another.y), 2))
	rospy.sleep(2)
        
	print('开始')
        #开始        
        self.gotoPoint((0.5,0.5,pi/2))
        #启用跟随
        self.gotoPoint((0.5,3.5,pi/4),True)
        self.gotoPoint((1,4,-pi/2))           
        self.gotoPoint((1,0,pi*3/4))
	print('结束')
        #结束
        rospy.loginfo("Stopping the robot...")
	self.shutdown()

    def gotoPoint(self,goal_position,isfollow = False):
	position = Point()	
	move_cmd = Twist()
        (position, rotation) = self.get_odom_robot2()
	
        last_rotation = 0
        linear_speed = 1
	max_linerspeed = 0.15
        angular_speed = 1
        (goal_x, goal_y, goal_z) = goal_position
        goal_distance = sqrt(pow(goal_x - position.x, 2) + pow(goal_y - position.y, 2))
        distance = goal_distance
        while distance > 0.05:
	    print('distance=%f' %(distance))
            (position, rotation) = self.get_odom_robot2()
            (position_another, rotation_another) = self.get_odom_robot1()    
                        
            x_start = position.x
            y_start = position.y

            distance_another = sqrt(pow((goal_x - position_another.x), 2) + pow((goal_y - position_another.y), 2))
            distance = sqrt(pow((goal_x - x_start), 2) + pow((goal_y - y_start), 2))
            distance_between = sqrt(pow((position_another.x - x_start), 2) + pow((position_another.y - y_start), 2))
            
            if distance <= 0.25 and distance_another < 0.25 and distance > distance_another:
                max_linerspeed = 0.13
                self.cmd_vel.publish(Twist())
		print('wait robot1,3 pass')
                isfollow = False
		rospy.sleep(0.01)
                continue

            if distance_another <= 0.05:
                isfollow = False
            if isfollow and distance_another<distance:
                #goal_x = position_another.x
                goal_y = position_another.y - 0.05
		#max_linerspeed = 0.18
                if goal_y - position.y>0.40:
                    max_linerspeed = 0.18
                else:
                    max_linerspeed = 0.15
		print('is following,distance=%f,distance_another=%f,distance_between=%f' %(distance,distance_another,distance_between))
            else:
		max_linerspeed = 0.14
                (goal_x, goal_y, goal_z) = goal_position
		move_cmd=Twist()
            
            path_angle = atan2(goal_y - y_start, goal_x- x_start)
	    '''
            if path_angle < -pi/4 or path_angle > pi/4:
                if goal_y < 0 and y_start < goal_y:
                    path_angle = -2*pi + path_angle
                elif goal_y >= 0 and y_start > goal_y:
                    path_angle = 2*pi + path_angle
	    '''	
            if last_rotation > pi-0.1 and rotation <= 0:
                rotation = 2*pi + rotation
            elif last_rotation < -pi+0.1 and rotation > 0:
                rotation = -2*pi + rotation	    

            move_cmd.angular.z = angular_speed * path_angle-rotation          
            move_cmd.linear.x = min(linear_speed * distance, max_linerspeed)	    
	    print('rotation=%f' %(rotation))
            if move_cmd.angular.z > 0:
                move_cmd.angular.z = min(move_cmd.angular.z, 1.5)
            else:
                move_cmd.angular.z = max(move_cmd.angular.z, -1.5)	    
            last_rotation = rotation
            self.cmd_vel.publish(move_cmd)
            self.r.sleep()
	(position, rotation) = self.get_odom_robot2()
        while abs(rotation - goal_z) > 0.10:
	    (position, rotation) = self.get_odom_robot2()
	    print('rotation=%f' %(rotation))
            if goal_z >= 0:
                if rotation <= goal_z and rotation >= goal_z - pi:
                    move_cmd.linear.x = 0.00
                    move_cmd.angular.z = 0.8
                else:
                    move_cmd.linear.x = 0.00
                    move_cmd.angular.z = -0.8
            else:
                if rotation <= goal_z + pi and rotation > goal_z:
                    move_cmd.linear.x = 0.00
                    move_cmd.angular.z = -0.8
                else:
                    move_cmd.linear.x = 0.00
                    move_cmd.angular.z = 0.8
            self.cmd_vel.publish(move_cmd)
            self.r.sleep()
	self.cmd_vel.publish(Twist())
    def get_odom_robot2(self):
        try:
            (trans, rot) = self.tf_listener_robot2.lookupTransform(self.odom_frame_robot2, self.base_frame_robot2, rospy.Time(0))
            rotation = euler_from_quaternion(rot)

        except (tf.Exception, tf.ConnectivityException, tf.LookupException):
            rospy.loginfo("TF Exception")
            return
	point=Point(*trans)
	point.x=point.x+0.16
        return (point, rotation[2])
        

    def get_odom_robot1(self):
        try:
            (trans, rot) = self.tf_listener_robot1.lookupTransform(self.odom_frame_robot1, self.base_frame_robot1, rospy.Time(0))
            rotation = euler_from_quaternion(rot)

        except (tf.Exception, tf.ConnectivityException, tf.LookupException):
            rospy.loginfo("TF Exception")
            return
        
        return (Point(*trans), rotation[2])
    def shutdown(self):
        self.cmd_vel.publish(Twist())
        rospy.sleep(1)


if __name__ == '__main__':
    try:
        while not rospy.is_shutdown():
            GotoPoint()

    except:
        rospy.loginfo("shutdown program.")
